plugins {
    id 'java'
    id 'war'
    id 'org.springframework.boot' version '3.1.3'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.owasp.dependencycheck' version '8.4.0'
}

group = 'com.protonmail.landrevillejf'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    mavenLocal()
    maven { url "https://repo1.maven.org/maven2" }
    maven {
        url "https://plugins.gradle.org/m2/"
    }
    maven {
        url "https://oss.sonatype.org/content/repositories/releases/"
    }
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

configurations.configureEach {
    resolutionStrategy.eachDependency {
        DependencyResolveDetails details ->
            if (details.requested.group == 'com.fasterxml.jackson.core' &&
                    details.requested.name == 'jackson-databind' && details.requested.version < '2.15.2') {
                details.useVersion '2.15.2'
                details.because '**DISPUTED: jackson-databind before 2.15.0-rc1 allows a Java StackOverflow ' +
                        'exception and denial of service via a large depth of nested objects.' +
                        ', CVE-2023-35116'
            }

            if (details.requested.group == 'org.yaml' &&
                    details.requested.name == 'snakeyaml' && details.requested.version < '2.2') {
                details.useVersion '2.2'
                details.because 'CVE-2022-1471'
            }

            if (details.requested.group == 'org.apache.tomcat.embed' &&
                    details.requested.name == 'tomcat-embed-core' && details.requested.version < '10.1.13') {
                details.useVersion '10.1.13'
                details.because 'CVE-2023-41080'
            }

            if (details.requested.group == 'org.apache.tomcat.embed' &&
                    details.requested.name == 'tomcat-embed-websocket' && details.requested.version < '10.1.13') {
                details.useVersion '10.1.13'
                details.because 'CVE-2023-41080'
            }

            if (details.requested.group == 'org.springframework.security' &&
                    details.requested.name == 'spring-security-config' && details.requested.version < '6.1.4') {
                details.useVersion '6.1.4'
                details.because 'CVE-2023-34042'
            }
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: '3.1.2'
    implementation 'mysql:mysql-connector-java:8.0.33'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-thymeleaf', version: '3.1.2'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
    implementation 'org.springdoc:springdoc-openapi-starter-common:2.1.0'
    implementation 'io.github.resilience4j:resilience4j-circuitbreaker:1.7.0' // Use the latest version
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
    implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.0.3'
    implementation 'org.modelmapper:modelmapper:3.1.0'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    // JUnit Jupiter API
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.0'
    // JUnit Jupiter Engine (to run tests)
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.0'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation 'io.cucumber:cucumber-java:7.13.0' // Cucumber core library
    implementation 'io.cucumber:cucumber-spring:7.13.0' // Cucumber Spring integration
    implementation 'io.cucumber:cucumber-junit:7.13.0' // Cucumber JUnit integration
    // Exclude commons-logging from Spring dependencies
    configurations {
        all*.exclude group: 'commons-logging', module: 'commons-logging'
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.register('deleteStaticFolder', Delete) {
    def dirName = "src/main/resources/static"
    file(dirName).list().each {
        f ->
            delete "${dirName}/${f}"
    }
}

tasks.register('cucumber') {
    dependsOn assemble, compileTestJava
    doLast {
        javaexec {
            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = [
                    '--glue', 'com.protonmail.landrevillejf.cognos.categories.api.cucumber', // Set your glue path
                    '--plugin', 'pretty', // You can customize the output format
                    'src/test/resources' // Path to your feature files
            ]
        }
    }
}

tasks.withType(Checkstyle).configureEach {
    reports {
        xml.required = false
        html.required = true
        html.stylesheet resources.text.fromFile('config/xsl/checkstyle-custom.xsl')
        minHeapSize = "200m"
        maxHeapSize = "1g"
    }
}
